{"version":3,"sources":["service/notes.js","App.js","index.js"],"names":["request","axios","get","nonExisting","id","content","date","important","then","res","data","concat","newObj","post","put","Note","note","toggleImportanceOf","label","className","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewnote","showAll","setShowAll","errorMessage","setErrorMessage","noteToShow","filter","useEffect","noteService","initialNotes","console","log","length","map","key","find","changeNote","returnNote","catch","err","setTimeout","onSubmit","event","preventDefault","target","noteObj","Date","toString","Math","random","returnedNote","onChange","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a98931a3.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 1000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(res => res.data.concat(nonExisting))\n}\n\nconst create = newObj => {\n    const request = axios.post(baseUrl, newObj)\n    return request.then(res => res.data)\n}\n\nconst update = (id , newObj) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObj)\n    return request.then(res => res.data)\n}\n\nexport default {getAll, create, update}","import React, { useEffect, useState } from 'react'\n\nimport noteService from './service/notes';\nimport '../src/index.css'\n\nconst Note = ({ note, toggleImportanceOf }) => {\n  const label = note.important ? 'make not important' : 'make important'\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportanceOf} >{label}</button>\n    </li>\n  )\n}\n\n// to show the error message\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n \n// inline style bad design but useful in some cases\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewnote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const addNote = (event) => {\n    event.preventDefault()\n    console.log(event.target)\n    const noteObj = {\n      //id: notes.length + 1,\n      content: newNote,\n      date: new Date().toString(),\n      important: Math.random() < 0.5\n    }\n\n    noteService\n      .create(noteObj)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewnote('')\n      })\n\n    console.log(noteObj.important)\n  }\n\n  const handleChange = (event) => {\n    console.log(event.target.value)\n    setNewnote(event.target.value)\n  }\n\n  const noteToShow = showAll ? notes : notes.filter(note => note.important === true)\n\n  /** // same as below \n   const hook = () => {\n      noteService\n        .getAll()\n        .then(initialNotes => {\n          console.log('promised fullfilled')\n          setNotes(initialNotes)\n        })\n    }\n  \n    useEffect(hook, []) \n   */\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        console.log('promised fullfilled')\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const toggleImportanceOf = id => {\n    //const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(note => note.id === id)\n    const changeNote = { ...note, important: !note.important }\n    noteService\n      .update(id, changeNote)\n      .then(returnNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnNote))\n      })\n      .catch(err => {\n        setErrorMessage(`Note '${note.content}' was already deleted from server`)\n        setNotes(notes.filter(note => note.id !== id))\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n  }\n\n  console.log('render', notes.length, 'notes')\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <button onClick={() => setShowAll(!showAll)}>show {showAll ? 'important' : 'all'}</button>\n      <ul>\n        {noteToShow.map((note) =>\n          <Note key={note.id} note={note} toggleImportanceOf={() => toggleImportanceOf(note.id)} />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          onChange={handleChange}\n          value={newNote} />\n        <button>Save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App';\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)\n\n// const notes = [\n//   {\n//     id: 1,\n//     content: 'HTML is easy',\n//     date: '2019-05-30T17:30:31.098Z',\n//     important: true\n//   },\n//   {\n//     id: 2,\n//     content: 'Browser can execute only Javascript',\n//     date: '2019-05-30T18:39:34.091Z',\n//     important: false\n//   },\n//   {\n//     id: 3,\n//     content: 'GET and POST are the most important methods of HTTP protocol',\n//     date: '2019-05-30T19:20:14.298Z',\n//     important: true\n//   }\n// ]\n\n"],"sourceRoot":""}